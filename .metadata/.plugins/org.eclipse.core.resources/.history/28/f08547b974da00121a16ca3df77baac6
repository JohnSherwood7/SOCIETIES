

#include <cmath>
#include <ctime> 
#include <string>
#include <sstream>
#include <algorithm>
#include <ctime>
#include <boost/foreach.hpp>
#include <boost/filesystem.hpp>
#include <boost/lexical_cast.hpp>	// for converting int to string
#include "boost/date_time/gregorian/gregorian.hpp"		// for date
#include "globals.h"
#include "agent.h"
#include "resource.h"
#include "marketplace.h"
#include "ran.h"
#include "statstracker.h"
#include "devmarketplace.h"
#include "utils.h"
#include "logging.h"


/*
 * Random number generator.  Generates random numbers between 0 and 1.
 */
Ran01<double>	randGen;
RanBinomial<double>	randBinomial;

string device_names[] = { "Tool", "Machine", "Factory", "Industry", "DevMachine", "DevFactory", "NoDevice!!" };


Globals::Globals()
{
    REMOVE_RES = false;
    REMOVE_AGENT = false;
    END_SAVE = false;
    SAVE_DAY_STATUS = false;
    IN_BATCH = false;
    SIM_NAME = "default";
    PARALLEL_TRADES = false;
    currentBatch = 0;
}


void Globals::initGlobalStructures()
{
    if (randomSeedSet) {
        randGen = Ran01<double>(randomSeed);
    } else {
        randGen = Ran01<double>();
    }
    if (randomSeedSet) {
        randBinomial = RanBinomial<double>(randomSeed);
    } else {
        randBinomial = RanBinomial<double>();
    }
    
    discoveredDevices.resize(NUM_DEVICE_TYPES);	// there are 6 empty vectors in this vector.
    EXPERIENCE_FOR_MAKING.resize(NUM_DEVICE_TYPES);	// there are 6 empty vectors in this vector
    RES_DECAY_SLOWNESS.resize(NUM_RESOURCES);
    RES_VALUES.resize(NUM_RESOURCES);

    if (START_DAY == 0) {		// if not loading a previous run
#if 0
    	// TODO: looks like doesn't exist in python anymore
        // Can't believe c++ string doesn't have tolower() built in...
        string lowerResFName(resFilename);
        transform(lowerResFName.begin(), lowerResFName.end(), lowerResFName.begin(),
                  ::tolower);
        if (lowerResFName != "random") {
            // TODO: convert to C++, not C-style stuff.

            FILE *resFile = open(resFilename, "r");
            string tempStr = resFile.readline();	// This is all wrong.
            RES_VALUES = eval(tempStr);
            tempStr = resFile.readline();
            RES_DECAY_SLOWNESS = eval(tempStr);
            close(resFile);

        } else {
#endif
            // Randomly generate resource values.
            for (int i = 0; i < NUM_RESOURCES; i++) {
                // short lifetime resources
                if (i % 3 == 0) {
                    RES_DECAY_SLOWNESS[i] = random_int(3, 5);
                } else if (i % 3 == 1) {
                    RES_DECAY_SLOWNESS[i] = random_int(6, 30);
                } else {
                    RES_DECAY_SLOWNESS[i] = random_int(31, 100);
                }
                RES_VALUES[i].steepnessFactor = random_range(2.0, 3.0); // [2.0, 3.0]
                // get uniformly random double in range [480., 720.]
                RES_VALUES[i].scalingFactor = random_range(240, 720);
            }
        // }
        for (int resId = 0; resId < NUM_RESOURCES; resId++) {
            res.push_back(Resource(resId));
            for (int devId = TOOL; devId <= DEVFACTORY; devId++) {
                discoveredDevices[devId].push_back(NULL);
            }
        }

        initializeAgents();

        for (int potentialExperience = 0; potentialExperience < (int) MAX_RES_EXPERIENCE;
             potentialExperience++) {
            RES_EFFORTS.push_back(MAX_RES_EFFORT -
                                  (MAX_RES_EFFORT - MIN_RES_EFFORT) *
                                  exp(- sqrt(MAX_RES_EFFORT) * 2 *
                                      exp(-(MAX_RES_EFFORT - MIN_RES_EFFORT)
                                          * potentialExperience / MAX_RES_EXPERIENCE)));
        }
        for (int potentialExperience = 0; potentialExperience < (int) MAX_DEVICE_EXPERIENCE;
             potentialExperience++) {
            DEVICE_EFFORTS.push_back(MAX_DEVICE_EFFORT -
                                     (MAX_DEVICE_EFFORT - MIN_DEVICE_EFFORT) *
                                     exp(-MAX_DEVICE_EFFORT * 2 *
                                         exp(-(MAX_DEVICE_EFFORT - MIN_DEVICE_EFFORT) / 2 *
                                             potentialExperience / MAX_DEVICE_EXPERIENCE)));
        }

        
        EXPERIENCE_FOR_MAKING[TOOL] = 1.0;
        EXPERIENCE_FOR_MAKING[MACHINE] = 2.0;
        EXPERIENCE_FOR_MAKING[FACTORY] = 4.0;
        EXPERIENCE_FOR_MAKING[INDUSTRY] = 8.0;
        EXPERIENCE_FOR_MAKING[DEVMACHINE] = 4.0;
        EXPERIENCE_FOR_MAKING[DEVFACTORY] = 8.0;
    }
    else {		// not START_DAY == 0
//#if 0
//        DAY_STATUS_LOAD_FOLDER = os.path.dirname(options.filename);	// TODO: vtn2: fix!  jj29: fixed. correct?
    	DAY_STATUS_LOAD_FOLDER = "";
        int slashIdx = configFilename.find_last_of('/');
        for (unsigned i = 0; i < slashIdx; i++) {
        	DAY_STATUS_LOAD_FOLDER += configFilename[i];
        }
//        loadDayStatus();	// from utils.cpp
//#endif
    }

    activeAgents = 0;
    for (int aId = 0; aId < NUM_AGENTS; aId++) {
        if (agent[aId]->inSimulation) {
            activeAgents++;
        }
    }

    // CODE HERE IN config.py to do GRAPH_X_VALUES, QUArtILE_COLORS.  Don't need to do this
    // for the cpp code.  leave in python.

    RES_IN_DEV.resize(NUM_DEVICE_TYPES);   // make room for a value for each device name.
    RES_IN_DEV[TOOL] = RESOURCES_IN_TOOL;
    RES_IN_DEV[MACHINE] = RESOURCES_IN_TOOL * NUM_DEVICE_COMPONENTS;
    RES_IN_DEV[FACTORY] = RESOURCES_IN_TOOL * NUM_DEVICE_COMPONENTS * NUM_DEVICE_COMPONENTS;
    RES_IN_DEV[INDUSTRY] = RESOURCES_IN_TOOL * NUM_DEVICE_COMPONENTS *
        NUM_DEVICE_COMPONENTS * NUM_DEVICE_COMPONENTS;
    RES_IN_DEV[DEVMACHINE] = RESOURCES_IN_TOOL * NUM_DEVICE_COMPONENTS * NUM_DEVICE_COMPONENTS;
    RES_IN_DEV[DEVFACTORY] = RESOURCES_IN_TOOL * NUM_DEVICE_COMPONENTS *
        NUM_DEVICE_COMPONENTS * NUM_DEVICE_COMPONENTS;

}

/**
 * Read agents values in from defaultAgentValues.aconf file, and initialize
 * each agent with its specific values.
 */
void Globals::initializeAgents()
{
    ifstream agentValsFile("../../conf/defaultAgentValues.aconf");	// TODO: FIX THIS

    /*
     * the agent values file is organized this way:
     * # comment line -- skip this.
     * Each non comment line has 9 values in it:
     *  steepness, scaling, minResEff, maxResEff, maxResExp, minDevEff, maxDevEff, maxDevExp, lifetime
     * First there is a line of this data for each of the resources for agent 0.  (typically 24 lines)
     * Then there is a line of this data for each of the resources for agent 1.   (typically 24 lines)
     * Repeat for each agent.
     * At the very end are two lines like this:
     * # MODES: lifetime_mode, dev_mode, util_mode, res_mode
     * homogeneous, homogeneous, homogeneous, homogeneous
     */
    for (int aId = 0; aId < NUM_AGENTS; aId++) {
        vector< vector<double> > agValues;
        for (int resId = 0; resId < NUM_RESOURCES; ) {
            string line;
            getline(agentValsFile, line);	// read line from file into string
            stringstream sline(line);		// make a stringstream of the line
            if (line[0] == '#') {		// if first char is #, skip line
                continue;
            }
            /* read in a line of 9 values for each resource, comma-separated. */
            vector<double> t(9, 0.0);
            for (int i = 0; i < 9; i++) {
                sline >> t[i];
                if (sline.peek() == ',') {
                    char comma;
                    sline >> comma;
                }
            }
            agValues.push_back(t);  // put the temporary vector of 9 values on the end.
            // We read in values for the resource, so now we get ready for
            // the next resource.
            resId++;
        }
        agent.push_back(new Agent(aId, agValues));
    }
}

/*
 * jj29, TODO
 * in python, a function called GuiSetupAdvOptions, similar with the first part of setAdvanceOptions and is never called.
 */


void Globals::setAdvancedOptions()
{
    // TONY: this code I've written is a little weird.  I've already read in all
    // the command-line options into glob -- e.g., glob.removeAgentId.  Now, I'm
    // just copying those values to new names -- e.g., AGENT_TO_REMOVE...
    // Tied in with this is:
    // I see that setAdvancedOptions() is called once before each simulation run.
    // Is that necessary?  The values couldn't change between runs, I don't think...
    // So, perhaps my code in options.cpp writes values to AGENT_TO_REMOVE directly,
    // and I don't need glob.removeAgentId, e.g.
    
    REMOVE_RES = false;
    if (removeResMidRun) {
        REMOVE_RES = true;
        RES_TO_REMOVE = removeResId;
        REMOVE_RES_DAY = removeResDay;
        ELIMINATE_RESERVES = removeResHoldings;
    }

    REMOVE_AGENT = false;
    if (removeAgentMidRun) {
        REMOVE_AGENT = true;
        AGENT_TO_REMOVE = removeAgentId;
        REMOVE_AGENT_DAY = removeAgentDay;
    }

    SAVE_DAY_STATUS = false;
    if (saveInMiddle) {
        DAY_STATUS_SAVE_FOLDER = saveInMiddleFoldername;
        DAY_FOR_SAVE = saveInMiddleDay;
        if (! boost::filesystem::exists(DAY_STATUS_SAVE_FOLDER)) {
            boost::filesystem::create_directory(DAY_STATUS_SAVE_FOLDER);
        }
        SAVE_DAY_STATUS = true;
    }

    END_SAVE = false;
    if (saveFileFolderSet) {
        END_SAVE = true;
        SAVE_FOLDER = saveFileFolder;
        if (! boost::filesystem::exists(SAVE_FOLDER)) {
            boost::filesystem::create_directory(SAVE_FOLDER);
        }
    }

    // jj29: TODO needs to be tested
    IN_BATCH = false;
    if (! END_SAVE) {
        // simTitle has default value of "default" if not set explicitly.
        SIM_NAME = simTitle;
    } else {
        if (batchNameSet) {
            IN_BATCH = true;
            // global year, month, day
            int dayNum = boost::gregorian::day_clock::local_day().day();
            day = boost::lexical_cast<string>( dayNum );	// convert int to string
            int monthNum = boost::gregorian::day_clock::local_day().month();
            month = boost::lexical_cast<string>( monthNum );
            int yearNum = boost::gregorian::day_clock::local_day().year();
            year = boost::lexical_cast<string>( yearNum );
            if ( ((int) log10( (double) monthNum ) + 1) < 2 ) {		// get the number of digits of month
            	month = "0" + month;
            }
            if ( ((int) log10( (double) dayNum ) + 1) < 2 ) {
            	day = "0" + day;
            }
            BATCH_NAME = "batch" + year + month + day + '_' + batchName;
            SAVE_FOLDER = SAVE_FOLDER + '/' + BATCH_NAME;
            if (! boost::filesystem::exists(SAVE_FOLDER)) {
                        boost::filesystem::create_directory(SAVE_FOLDER);
            }
            pair<string, string> names = calcSimName(year + month + day + '_' + batchName);
            SIM_NAME = names.first;
            STATS_FILE_NAME = names.second;
            SIM_SAVE_FOLDER = SAVE_FOLDER + '/' + SIM_NAME;
            if (! boost::filesystem::exists(SIM_SAVE_FOLDER)) {
            	boost::filesystem::create_directory(SIM_SAVE_FOLDER);
            }

        } else if (simTitle == "default") {	// sim title wasn't explicity set.
//#if 0
        	/*
        	 * TODO: not sure about the name. python mkdtemp generates a random name with prefix sim_.
        	 * For path spliting, any easier way?
        	 */
        	SIM_SAVE_FOLDER = SAVE_FOLDER + "/sim_default";
            boost::filesystem::path dir(SIM_SAVE_FOLDER);
            int slashIdx = SIM_SAVE_FOLDER.find_last_of('/');
            SIM_NAME = "";
            for (unsigned i = slashIdx + 1; i < SIM_SAVE_FOLDER.length(); i++) {
            	SIM_NAME += SIM_SAVE_FOLDER[i];
            }
//#endif
        } else {
            SIM_NAME = simTitle;
            boost::filesystem::path simSaveFolder(SAVE_FOLDER);
            SIM_SAVE_FOLDER = SAVE_FOLDER + '/' + SIM_NAME;
            if (! boost::filesystem::exists(SIM_SAVE_FOLDER)) {
                boost::filesystem::create_directory(SIM_SAVE_FOLDER);
            }
        }
    }
    
    SAVE_TRADES = glob.saveExchangeRateData;
}

void Globals::setGlobalMarketPlaces()
{
    resourceMarket = new ResourceMarketplace();
    deviceMarket = new DeviceMarketplace();
}

void Globals::setGlobalStats()
{
	tradeStats = new TradeStats();
	productionStats = new ProductionStats();
	otherStats = new OtherStats();
}


void Globals::startTimer()
{
    startTime = time(0);
}

void Globals::endTimer()
{
    endTime = time(0);
}


void Globals::removeAgent(int agentNumber, int day)
{
    agent[agentNumber]->remove();
    activeAgents--;
    LOG(3) << "Agent " << agentNumber << " has been removed";
}


void Globals::removeRes(int resNumber, int day)
{
    res[resNumber].remove();
    BOOST_FOREACH(Agent *ag, agent) {
        for (int dev = TOOL; dev <= DEVFACTORY; dev++) {
            ag->devProp[dev][resNumber].deviceHeld = 0;
        }
    }
    if (ELIMINATE_RESERVES) {
        BOOST_FOREACH(Agent *ag, agent) {
            ag->resProp[resNumber].setHeld(0);
            ag->resProp[resNumber].experience = 0;
        }
    }
    LOG(4) << "Res " << resNumber << " has been removed";
}


// returns value in range [lower, upper) (as far as I can tell).
double Globals::random_range(double lower, double upper) {
    return (randGen() * (upper - lower)) + lower;
}
// returns value in range [0.0, 1.0) (as far as I can tell).
double Globals::random_01() {
    return random_range(0.0, 1.0);
}
// returns integer value in range [lower, upper).
int Globals::random_int(int lower, int upper) {
    return ((int) random_range(lower, upper));
}
// returns integer value in range [lower, upper].
int Globals::random_int_inclusive(int lower, int upper) {
    return random_int(lower, upper + 1);
}

// returns a value randomly chosen from the vector.
int Globals::random_choice(vector<int> &vec)
{
    return vec[random_int(0, vec.size())];
}

// returns a value randomly from a binomial distribution.
double Globals::random_binomial(int n, double p)
{
    return randBinomial(n, p);
}

void Globals::reinitialize()
{
    pair<string, string> names = calcSimName(year + month + day + '_' + batchName);
    SIM_NAME = names.first;
    STATS_FILE_NAME = names.second;
    SIM_SAVE_FOLDER = SAVE_FOLDER + '/' + SIM_NAME;
    if (! boost::filesystem::exists(SIM_SAVE_FOLDER)) {
        boost::filesystem::create_directory(SIM_SAVE_FOLDER);
    }
}

int Globals::calcScenarioNumber()
{
    int scenarioNum = 1;
    if (TRADE_EXISTS) {
        scenarioNum = 2;
        if (DEVICES_EXIST) {
            scenarioNum = 4;
            if (TOOLS_ONLY) {
                scenarioNum = 3;
            }
        }
    }
    return scenarioNum;
}

string Globals::calcSimNumber(string simName)
{
    char simNum [3] = {'0', '0', '1'};
    string simNumStr = "";
    simNumStr = simNum[0] + simNumStr + simNum[1] + simNumStr + simNum[2];
    wchar_t tmpChar;
    unsigned long tmpLong;
    while ( boost::filesystem::exists(SAVE_FOLDER + '/' + simName + '_' + 'r' + simNumStr) ) {
        tmpChar = simNum[2];
        tmpLong = tmpChar;		// get the unicode
        simNum[2] = char(tmpLong + 1);
        /* If the last character has passed the ascii numbers. */
        if (simNum[2] == ':') {
            simNum[2] = '0';
            tmpChar = simNum[1];
            tmpLong = tmpChar;
            simNum[1] = char(tmpLong + 1);
            /* If the second character has passed the ascii numbers. */
            if (simNum[1] == ':') {
                simNum[1] = '0';
                tmpChar = simNum[0];
                tmpLong = tmpChar;
                simNum[0] = char(tmpLong + 1);
            }
        }
        simNumStr = "";
        simNumStr = simNum[0] + simNumStr + simNum[1] + simNumStr + simNum[2];
    }
    return simNumStr;
}


pair<string, string> Globals::calcSimName(string nameBegin)
{
    int scenarioNum = calcScenarioNumber();
    int numSims = batchNumSims;
    string simName = nameBegin + '_' + boost::lexical_cast<string>(NUM_RESOURCES)
            + '_' + boost::lexical_cast<string>(NUM_AGENTS)
            + '_' + boost::lexical_cast<string>(NUM_DAYS)
            + '_' + boost::lexical_cast<string>(scenarioNum)
            + '_' + boost::lexical_cast<string>(numSims);
    string simNumber = calcSimNumber(simName);
    pair<string, string> result = make_pair(simName + '_' + 'r' + simNumber, simName);
    return result;
}


void Globals::printConfig()
{
    cout << "Simulation variables:" << endl;
    cout << "Day length is " << DAY_LENGTH << endl;
    cout << "Number of days is " << NUM_DAYS << endl;
    cout << "Number of agents is " << NUM_AGENTS << endl;
    cout << "Number of resources is " << NUM_RESOURCES << endl << endl;

    cout << "Trade Context variables: " << endl;
    cout << "Number of resource trade rounds is " << RES_TRADE_ROUNDS << endl;
    cout << "Epsilon of trade " << TRADE_EPSILON << endl;
    cout << "Number of resource trade attempts is " << RES_TRADE_ATTEMPTS << endl;
    cout << "Number of device trade rounds is " << DEVICE_TRADE_ROUNDS << endl;
    cout << "Number of device trade attempts is " << DEVICE_TRADE_ATTEMPTS << endl;
    cout << "Menu size is " << MENU_SIZE << endl << endl;

    cout << "Input booleans " << endl;
    cout << "A resource will be removed: " << REMOVE_RES << endl;
    cout << "Trade exists: " << TRADE_EXISTS << endl;
    cout << "Devices exist: " << DEVICES_EXIST << endl << endl;

    cout << "Agent Capacity variables: " << endl;
    cout << "Device trade memory length is " << DEVICE_TRADE_MEMORY_LENGTH << endl;
    cout << "Device production memory length is " <<
        DEVICE_PRODUCTION_MEMORY_LENGTH << endl;
    cout << "Daily experience loss for idle resources is " << DAILY_EXP_PENALTY << endl;
    cout << "Maximum resource experience is " << MAX_RES_EXPERIENCE << endl;
    cout << "Minimum effort that can go into a resource is " << MIN_RES_EFFORT << endl;
    cout << "Days of device to hold " << DAYS_OF_DEVICE_TO_HOLD << endl << endl;

    cout << "Extraction Efficiency variables: " << endl;
    cout << "Factor of a tool " << TOOL_FACTOR << endl;
    cout << "Lifetime of a tool " << TOOL_LIFETIME << endl;
    cout << "Factor of a machine " << MACHINE_FACTOR << endl;
    cout << "Lifetime of a machine " << MACHINE_LIFETIME << endl;
    cout << "Factor of a factory " << FACTORY_FACTOR << endl;
    cout << "Lifetime of a factory " << FACTORY_LIFETIME << endl;
    cout << "Factor of a industry " << INDUSTRY_FACTOR << endl;
    cout << "Lifetime of a industry " << INDUSTRY_LIFETIME << endl;
    cout << "Factor of a device machine " << DEV_MACHINE_FACTOR << endl;
    cout << "Lifetime of a device machine " << DEV_MACHINE_LIFETIME << endl;
    cout << "Factor of a device factory " << DEV_FACTORY_FACTOR << endl;
    cout << "Lifetime of a device factory " << DEV_FACTORY_LIFETIME << endl << endl;

    cout << "Production Efficiency variables: " << endl;
    cout << "Number of resources to make a tool is " << RESOURCES_IN_TOOL << endl;
    cout << "Experience the inventor gains for the invention is " << INVENTOR_DEVICE_EXPERIENCE << endl;
    cout << "Number of components that go into a device is " << NUM_DEVICE_COMPONENTS << endl;
    cout << "Maximum experience someone can have in a device is " << MAX_DEVICE_EXPERIENCE << endl;
    cout << "Amount of decay devices experience on a daily basis " << DAILY_DEVICE_DECAY << endl;
    cout << "Production Epsilon is " << PRODUCTION_EPSILON << endl << endl;

    cout << "Innovation Volume/Speed variables: " << endl;
    cout << "Minimum resources required for device construction is " << MIN_RES_HELD_FOR_DEVICE_CONSIDERATION << endl;
    cout << "Minimum device experience for an agent that holds the device is " << MIN_HELD_DEVICE_EXPERIENCE << endl;
    cout << "Minimum devices made recently to consider obtaining a device making device is " << MIN_DEVICE_FOR_DEV_DEVICE_CONSIDERATION << endl << endl;

}

void Globals::setCurrentBatch()
{
    currentBatch++;
}


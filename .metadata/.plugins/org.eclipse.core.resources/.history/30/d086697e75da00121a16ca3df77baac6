
#include <string>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <boost/program_options.hpp>

#include "globals.h"
#include "logging.h"

using namespace std;
namespace po = boost::program_options;


int parse_args(int argc, char **argv)
{
    vector<string> batchArg;
    vector<int> remAgentArg;
    vector<int> remResArg;
    vector<string> saveInMiddleArg;
    try {
        po::options_description cmdLineOpts("Allowed options");
        cmdLineOpts.add_options()
            ("help,h", "produce help message")
            ("parameter,p", po::value<string>(), "use given file for global variable values")
            ("heterogeneous,z", po::value<string>(), "use the given file for agent values")
            ("save,s", po::value<string>(), "write results to folder")	// no default value
            ("seed,S", po::value<int>(), "initialize random number generator to given seed so that output is same for each run")
            ("title,t", po::value<string>()->default_value("default"), "give the simulation a title")
            ("number,u", po::value< vector<string> >(&batchArg)->multitoken(), "Indicates that this simulation is part of a batch (first arg: unique string to identify the batch, second arg: number of simulations in the batch, third arg: number of runs of the batch that should be run consecutively)")
            ("graph,g", "allow choice of graphs to generate upon completion")
            ("norun,n", "load and print the current config values, then exit")
            ("agent,a", po::value< vector<int> >(&remAgentArg)->multitoken(), "remove an agent mid-run (first arg: which agent to remove, second arg: which day to remove the agent)")
            ("resource,r", po::value< vector<int> >(&remResArg)->multitoken(), "remove a resource mid-run (first arg: which resource to remove, second arg: which day to remove the resource, third arg: 1 for removing the holdings of that resource on the given day, 0 for not)")
            ("middle,m", po::value< vector<string> >(&saveInMiddleArg)->multitoken(), "save the simulation mid-run (first arg: destination folder, second arg: day on which to save)")
            ("verbose,v", po::value<int>(), "set level of debugging output from 0 to 3.  0 = nothing; 3 = everything")
            // NOTE: not adding --parallel now
            ("exchange,e", "store exchange rate data from all trades")
            ;

        po::options_description cfgFileOpts("Config file options");
        cfgFileOpts.add_options()
            ("NUM_AGENTS",      po::value<int>(&glob.NUM_AGENTS), "number of agents in this simulation")
            ("START_DAY",       po::value<int>(&glob.START_DAY),  "the day to start on when restarting a simulation")
            ("DAY_LENGTH",      po::value<int>(&glob.DAY_LENGTH), "the length of a day")
            ("NUM_DAYS",        po::value<int>(&glob.NUM_DAYS), "number of days in the simulation")
            ("NUM_RESOURCES",   po::value<int>(&glob.NUM_RESOURCES), "number of resources in the simulation")
            ("RES_TRADE_ROUNDS", po::value<int>(&glob.RES_TRADE_ROUNDS), "number of resource trading rounds")
            ("RES_TRADE_ATTEMPTS", po::value<int>(&glob.RES_TRADE_ATTEMPTS), "number of resource trading attempts")
            ("DEVICE_TRADE_ROUNDS", po::value<int>(&glob.DEVICE_TRADE_ROUNDS), "number of device trading rounds")
            ("DEVICE_TRADE_ATTEMPTS", po::value<int>(&glob.DEVICE_TRADE_ATTEMPTS), "number of device trading attempts")
            ("MENU_SIZE",       po::value<int>(&glob.MENU_SIZE), "Menu size: fix this!")
            ("DEVICE_TRADE_MEMORY_LENGTH", po::value<int>(&glob.DEVICE_TRADE_MEMORY_LENGTH), "HELP")
            ("DEVICE_PRODUCTION_MEMORY_LENGTH", po::value<int>(&glob.DEVICE_PRODUCTION_MEMORY_LENGTH), "HELP")
	    ("MIN_DEVICE_FOR_DEV_DEVICE_CONSIDERATION", po::value<int>(&glob.MIN_DEVICE_FOR_DEV_DEVICE_CONSIDERATION), "HELP")
	    ("MIN_RES_HELD_FOR_DEVICE_CONSIDERATION", po::value<int>(&glob.MIN_RES_HELD_FOR_DEVICE_CONSIDERATION), "HELP")
            ("DAILY_EXP_PENALTY", po::value<double>(&glob.DAILY_EXP_PENALTY), "HELP")
            ("PRODUCTION_EPSILON", po::value<double>(&glob.PRODUCTION_EPSILON), "HELP")
            ("RESOURCES_IN_TOOL",  po::value<int>(&glob.RESOURCES_IN_TOOL), "number of resources needed to make a tool (?)")
            ("MAX_RES_EXPERIENCE",  po::value<double>(&glob.MAX_RES_EXPERIENCE), "HELP")
            ("INVENTOR_DEVICE_EXPERIENCE",  po::value<double>(&glob.INVENTOR_DEVICE_EXPERIENCE), "HELP")
            ("NUM_DEVICE_COMPONENTS",  po::value<int>(&glob.NUM_DEVICE_COMPONENTS), "HELP")
            ("MAX_DEVICE_EXPERIENCE",  po::value<double>(&glob.MAX_DEVICE_EXPERIENCE), "HELP")
            ("DAILY_DEVICE_DECAY",  po::value<double>(&glob.DAILY_DEVICE_DECAY), "HELP")
            ;

        cmdLineOpts.add(cfgFileOpts);

        /*
         * Can't figure out how to get this working with program_options stuff,
         * because I need to read one command-line arg in order to be able to
         * find the config file...  So, we'll do it the old-fashioned way.
         */
        bool foundParamFile = false;
        for (int a = 0; a < argc; a++) {
            if (strcmp(argv[a], "--parameter") == 0 || strcmp(argv[a], "-p") == 0) {
                glob.configFilename = argv[++a];
                foundParamFile = true;
                break;
            }
        }
        if (! foundParamFile) {
            // default value for config file.
            glob.configFilename = "../../conf/defaultValues.conf";
//            glob.configFilename = "../../conf/trade_devices.conf";
        }


        po::variables_map vm;
        po::store(po::parse_command_line(argc, argv, cmdLineOpts), vm);

        // true means there can be lines in the config file we don't know about.
        po::store(po::parse_config_file<char>(glob.configFilename.c_str(), cfgFileOpts, true), vm);
        po::notify(vm);

        if (vm.count("help")) {
            cout << cmdLineOpts << "\n";
            return 0;
        }

        if (vm.count("heterogeneous")) {
            glob.configAgentFilename = vm["heterogeneous"].as<string>();
        } else {
            glob.configAgentFilename = "../../conf/defaultAgentValues.aconf";
        }
        if (vm.count("save")) {
            glob.saveFileFolderSet = true;
            glob.saveFileFolder = vm["save"].as<string>();
        } else {
            glob.saveFileFolderSet = false;
        }
        if (vm.count("seed")) {
            glob.randomSeedSet = true;
            glob.randomSeed = vm["seed"].as<int>();
        } else {
            glob.randomSeedSet = false;
        }
        if (vm.count("title")) {
            glob.simTitle = vm["title"].as<string>();
        }
        if (vm.count("number")) {
            glob.batchNameSet = true;
            glob.batchName = batchArg[0];
            if (batchArg.size() == 3) {
		// throw an exception when the input is in wrong type                
                glob.batchNumSims = boost::lexical_cast<int>(batchArg[1]);
                glob.batchNumRuns = boost::lexical_cast<int>(batchArg[2]);
            } else {
                cout << batchArg[0] + "  "+ batchArg[1] + " " + batchArg[2] + "does not have correct args." << endl;
            }
        } else {
            glob.batchNameSet = false;
            glob.batchNumRuns = 1;
        }
        if (vm.count("graph")) {
            glob.graphSet = true;
        } else {
            glob.graphSet = false;
        }
        if (vm.count("norun")) {
            glob.noRunSet = true;
        } else {
            glob.noRunSet = false;
        }
        if (vm.count("agent")) {
            glob.removeAgentMidRun = true;
            if (remAgentArg.size() == 2) {
                glob.removeAgentId = remAgentArg[0];
                glob.removeAgentDay = remAgentArg[1];
            } else {
                cout << "Wrong number of arguments. Should be two." << endl;
                return 0;
            }
        } else {
            glob.removeAgentMidRun = false;
        }
        if (vm.count("resource")) {
            glob.removeResMidRun = true;
            if (remResArg.size() == 3) {
                glob.removeResId = remResArg[0];
                glob.removeResDay = remResArg[1];
                if (remResArg[2] == 0) {
                    glob.removeResHoldings = false;
                } else if (remResArg[2] == 1) {
                    glob.removeResHoldings = true;
                }
            } else {
                cout << "Wrong number of arguments. Should be three. " << endl;
                return 0;
            }
        } else {
            glob.removeResMidRun = false;
        }
        if (vm.count("middle")) {
            glob.saveInMiddle = true;
            if (saveInMiddleArg.size() == 2) {
                glob.saveInMiddleFoldername = saveInMiddleArg[0];
                glob.saveInMiddleDay = boost::lexical_cast<int>(saveInMiddleArg[1]);
            } else {
                cout << "Wrong number of arguments. Should be two." << endl;
            }
        } else {
            glob.saveInMiddle = false;
        }
        if (vm.count("verbose")) {
            glob.verboseLevel = vm["verbose"].as<int>();
        } else {
            glob.verboseLevel = 3;
        }
        if (vm.count("exchange")) {
            glob.saveExchangeRateData = true;
        } else {
            glob.saveExchangeRateData = false;
        }

        if (vm.count("NUM_AGENTS")) {
            glob.NUM_AGENTS = vm["NUM_AGENTS"].as<int>();
        } else {
            cerr << "NUM_AGENTS value not in config file" << endl;
            return -1;
        }
        if (vm.count("START_DAY")) {
            glob.START_DAY = vm["START_DAY"].as<int>();
        } else {
            cerr << "START_DAY value not in config file" << endl;
            return -1;
        }
        if (vm.count("DAY_LENGTH")) {
            glob.DAY_LENGTH = vm["DAY_LENGTH"].as<int>();
        } else {
            cerr << "DAY_LENGTH value not in config file" << endl;
            return -1;
        }
        if (vm.count("NUM_DAYS")) {
            glob.NUM_DAYS = vm["NUM_DAYS"].as<int>();
        } else {
            cerr << "NUM_DAYS value not in config file" << endl;
            return -1;
        }
        if (vm.count("NUM_RESOURCES")) {
            glob.NUM_RESOURCES = vm["NUM_RESOURCES"].as<int>();
        } else {
            cerr << "NUM_RESOURCES value not in config file" << endl;
            return -1;
        }
        if (vm.count("RES_TRADE_ROUNDS")) {
            glob.RES_TRADE_ROUNDS = vm["RES_TRADE_ROUNDS"].as<int>();
        } else {
            cerr << "RES_TRADE_ROUNDS value not in config file" << endl;
            return -1;
        }
        if (vm.count("RES_TRADE_ATTEMPTS")) {
            glob.RES_TRADE_ATTEMPTS = vm["RES_TRADE_ATTEMPTS"].as<int>();
        } else {
            cerr << "RES_TRADE_ATTEMPTS value not in config file" << endl;
            return -1;
        }
        if (vm.count("DEVICE_TRADE_ROUNDS")) {
            glob.DEVICE_TRADE_ROUNDS = vm["DEVICE_TRADE_ROUNDS"].as<int>();
        } else {
            cerr << "DEVICE_TRADE_ROUNDS value not in config file" << endl;
            return -1;
        }
        if (vm.count("DEVICE_TRADE_ATTEMPTS")) {
            glob.DEVICE_TRADE_ATTEMPTS = vm["DEVICE_TRADE_ATTEMPTS"].as<int>();
        } else {
            cerr << "DEVICE_TRADE_ATTEMPTS value not in config file" << endl;
            return -1;
        }
        if (vm.count("MENU_SIZE")) {
            glob.MENU_SIZE = vm["MENU_SIZE"].as<int>();
        } else {
            cerr << "MENU_SIZE value not in config file" << endl;
            return -1;
        }
        if (vm.count("DEVICE_TRADE_MEMORY_LENGTH")) {
            glob.DEVICE_TRADE_MEMORY_LENGTH = vm["DEVICE_TRADE_MEMORY_LENGTH"].as<int>();
        } else {
            cerr << "DEVICE_TRADE_MEMORY_LENGTH value not in config file" << endl;
            return -1;
        }
        if (vm.count("DEVICE_PRODUCTION_MEMORY_LENGTH")) {
            glob.DEVICE_PRODUCTION_MEMORY_LENGTH = vm["DEVICE_PRODUCTION_MEMORY_LENGTH"].as<int>();
        } else {
            cerr << "DEVICE_PRODUCTION_MEMORY_LENGTH value not in config file" << endl;
            return -1;
        }
        if (vm.count("MIN_DEVICE_FOR_DEV_DEVICE_CONSIDERATION")) {
            glob.MIN_DEVICE_FOR_DEV_DEVICE_CONSIDERATION = vm["MIN_DEVICE_FOR_DEV_DEVICE_CONSIDERATION"].as<int>();
        } else {
            cerr << "MIN_DEVICE_FOR_DEV_DEVICE_CONSIDERATION value not in config file" << endl;
            return -1;
        }
        if (vm.count("MIN_RES_HELD_FOR_DEVICE_CONSIDERATION")) {
            glob.MIN_RES_HELD_FOR_DEVICE_CONSIDERATION = vm["MIN_RES_HELD_FOR_DEVICE_CONSIDERATION"].as<int>();
        } else {
            cerr << "MIN_RES_HELD_FOR_DEVICE_CONSIDERATION value not in config file" << endl;
            return -1;
        }
        if (vm.count("DAILY_EXP_PENALTY")) {
            glob.DAILY_EXP_PENALTY = vm["DAILY_EXP_PENALTY"].as<double>();
        } else {
            cerr << "DAILY_EXP_PENALTY value not in config file" << endl;
            return -1;
        }
        if (vm.count("PRODUCTION_EPSILON")) {
            glob.PRODUCTION_EPSILON = vm["PRODUCTION_EPSILON"].as<double>();
        } else {
            cerr << "PRODUCTION_EPSILON value not in config file" << endl;
            return -1;
        }
        if (vm.count("RESOURCES_IN_TOOL")) {
            glob.RESOURCES_IN_TOOL = vm["RESOURCES_IN_TOOL"].as<int>();
        } else {
            cerr << "RESOURCES_IN_TOOL value not in config file" << endl;
            return -1;
        }
        if (vm.count("MAX_RES_EXPERIENCE")) {
            glob.MAX_RES_EXPERIENCE = vm["MAX_RES_EXPERIENCE"].as<double>();
        } else {
            cerr << "MAX_RES_EXPERIENCE value not in config file" << endl;
            return -1;
        }
        if (vm.count("INVENTOR_DEVICE_EXPERIENCE")) {
            glob.INVENTOR_DEVICE_EXPERIENCE = vm["INVENTOR_DEVICE_EXPERIENCE"].as<double>();
        } else {
            cerr << "INVENTOR_DEVICE_EXPERIENCE value not in config file" << endl;
            return -1;
        }
        if (vm.count("NUM_DEVICE_COMPONENTS")) {
            glob.NUM_DEVICE_COMPONENTS = vm["NUM_DEVICE_COMPONENTS"].as<int>();
        } else {
            cerr << "NUM_DEVICE_COMPONENTS value not in config file" << endl;
            return -1;
        }
        if (vm.count("MAX_DEVICE_EXPERIENCE")) {
            glob.MAX_DEVICE_EXPERIENCE = vm["MAX_DEVICE_EXPERIENCE"].as<double>();
        } else {
            cerr << "MAX_DEVICE_EXPERIENCE value not in config file" << endl;
            return -1;
        }
        if (vm.count("DAILY_DEVICE_DECAY")) {
            glob.DAILY_DEVICE_DECAY = vm["DAILY_DEVICE_DECAY"].as<double>();
        } else {
            cerr << "DAILY_DEVICE_DECAY value not in config file" << endl;
            return -1;
        }
        
    } catch (exception& e) {
        cout << "Wrong args: " << e.what() << endl;
        return -1;
    }
    return 0;
}

#include "config.h"
using namespace rude;
void readConfigFile()
{
    Config conf;

    conf.load(glob.configFilename.c_str());
    // glob.START_DAY = conf.getIntValue("START_DAY");
    // glob.DAY_LENGTH = conf.getIntValue("DAY_LENGTH");
    // glob.NUM_DAYS = conf.getIntValue("NUM_DAYS");
    //    glob.NUM_AGENTS = conf.getIntValue("NUM_AGENTS"); getting this above now...
    // glob.NUM_RESOURCES = conf.getIntValue("NUM_RESOURCES");
    // glob.RES_TRADE_ROUNDS = conf.getIntValue("RES_TRADE_ROUNDS");
    // glob.RES_TRADE_ATTEMPTS = conf.getIntValue("RES_TRADE_ATTEMPTS");
    // glob.DEVICE_TRADE_ROUNDS = conf.getIntValue("DEVICE_TRADE_ROUNDS");
    // glob.DEVICE_TRADE_ATTEMPTS = conf.getIntValue("DEVICE_TRADE_ATTEMPTS");
    // glob.MENU_SIZE = conf.getIntValue("MENU_SIZE");
    // glob.DEVICE_TRADE_MEMORY_LENGTH = conf.getIntValue("DEVICE_TRADE_MEMORY_LENGTH");
    // glob.DEVICE_PRODUCTION_MEMORY_LENGTH = conf.getIntValue("DEVICE_PRODUCTION_MEMORY_LENGTH");
    // glob.MIN_DEVICE_FOR_DEV_DEVICE_CONSIDERATION = conf.getIntValue("MIN_DEVICE_FOR_DEV_DEVICE_CONSIDERATION");
    // glob.MIN_RES_HELD_FOR_DEVICE_CONSIDERATION = conf.getIntValue("MIN_RES_HELD_FOR_DEVICE_CONSIDERATION");
    // glob.DAILY_EXP_PENALTY = conf.getDoubleValue("DAILY_EXP_PENALTY");
    // glob.PRODUCTION_EPSILON = conf.getDoubleValue("PRODUCTION_EPSILON");
    // glob.RESOURCES_IN_TOOL = conf.getIntValue("RESOURCES_IN_TOOL");
    // glob.MAX_RES_EXPERIENCE = conf.getDoubleValue("MAX_RES_EXPERIENCE");
    // glob.INVENTOR_DEVICE_EXPERIENCE = conf.getDoubleValue("INVENTOR_DEVICE_EXPERIENCE");
    // glob.NUM_DEVICE_COMPONENTS = conf.getIntValue("NUM_DEVICE_COMPONENTS");
    // glob.MAX_DEVICE_EXPERIENCE = conf.getDoubleValue("MAX_DEVICE_EXPERIENCE");
    // glob.DAILY_DEVICE_DECAY = conf.getDoubleValue("DAILY_DEVICE_DECAY");
    glob.MIN_HELD_DEVICE_EXPERIENCE = conf.getDoubleValue("MIN_HELD_DEVICE_EXPERIENCE");
    glob.MAX_RES_EFFORT = conf.getDoubleValue("MAX_RES_EFFORT");
    glob.MIN_RES_EFFORT = conf.getDoubleValue("MIN_RES_EFFORT");
    glob.MAX_DEVICE_EFFORT = conf.getDoubleValue("MAX_DEVICE_EFFORT");
    glob.MIN_DEVICE_EFFORT = conf.getDoubleValue("MIN_DEVICE_EFFORT");
    glob.MIN_RES_UTIL = conf.getDoubleValue("MIN_RES_UTIL");
    glob.TRADE_EPSILON = conf.getDoubleValue("TRADE_EPSILON");
    glob.TOOL_PROBABILITY_FACTOR = conf.getDoubleValue("TOOL_PROBABILITY_FACTOR");
    glob.DEVICE_PROBABILITY_FACTOR = conf.getDoubleValue("DEVICE_PROBABILITY_FACTOR");
    glob.TOOL_FACTOR = conf.getDoubleValue("TOOL_FACTOR");
    glob.TOOL_LIFETIME = conf.getDoubleValue("TOOL_LIFETIME");
    glob.MACHINE_FACTOR = conf.getDoubleValue("MACHINE_FACTOR");
    glob.MACHINE_LIFETIME = conf.getDoubleValue("MACHINE_LIFETIME");
    glob.FACTORY_FACTOR = conf.getDoubleValue("FACTORY_FACTOR");
    glob.FACTORY_LIFETIME = conf.getDoubleValue("FACTORY_LIFETIME");
    glob.INDUSTRY_FACTOR = conf.getDoubleValue("INDUSTRY_FACTOR");
    glob.INDUSTRY_LIFETIME = conf.getDoubleValue("INDUSTRY_LIFETIME");
    glob.DEV_MACHINE_FACTOR = conf.getDoubleValue("DEV_MACHINE_FACTOR");
    glob.DEV_MACHINE_LIFETIME = conf.getDoubleValue("DEV_MACHINE_LIFETIME");
    glob.DEV_FACTORY_FACTOR = conf.getDoubleValue("DEV_FACTORY_FACTOR");
    glob.DEV_FACTORY_LIFETIME = conf.getDoubleValue("DEV_FACTORY_LIFETIME");
    glob.DAYS_OF_DEVICE_TO_HOLD = conf.getDoubleValue("DAYS_OF_DEVICE_TO_HOLD");
    glob.TRADE_EXISTS = conf.getBoolValue("TRADE_EXISTS");
    glob.DEVICES_EXIST = conf.getBoolValue("DEVICES_EXIST");
    glob.TOOLS_ONLY = conf.getBoolValue("TOOLS_ONLY");
}

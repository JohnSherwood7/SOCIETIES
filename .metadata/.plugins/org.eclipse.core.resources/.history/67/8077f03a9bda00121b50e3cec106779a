#ifndef _SOC_AGENT_H_
#define _SOC_AGENT_H_

#include <vector>
#include "properties.h"
#include "globals.h"
using namespace std;

struct MaxInfo {
	double maxGain;
	double maxIndex;
	double costOfMax;
	double benefitOfMax;
};

class Device;

class Agent
{
private:
    void initializeAll(int number, vector< vector<double> > agentValues);
    void defineProperties();


public:
    vector<ResProperties> resProp; // will be size glob.NUM_RESOURCES;
    // devProp[glob.NUM_DEVICE_TYPES][glob.NUM_RESOURCES]
    vector< vector<DevProperties> > devProp; 
    bool inSimulation;
    int name;
    vector< vector<double> > personalValues;
    /**
     * penalty is the amount of experience lost from work experience on
     * a resource every day that the agent does not work on that
     * resource.
     */
    double penalty;
    /**
     * When valuing tools for trade, agents use the gain per minute (in
     * terms of utility) that they were getting at the end of the day to
     * calculate opportunity costs.
     */
    double endDayGPM;
    /**
     * When deciding how many tools an agent can make, agents keep track
     * of how much time it must set aside to build those tools.
     */
    double setAsideTime;
    /**
     * When an agent sells a tool that it doesn't own, it works
     * "overtime" and that time is subtracted from the next work day.
     */
    double overtime;

    /**
     * Each element in these lists is a list of the five most
     * recent device trade surpluses with each other agent.
     * indexed by [glob.NUM_DEVICE_TYPES][glob.NUM_AGENTS][glob.DEVICE_TRADE_MEMORY_LENGTH]
     */   
    vector< vector< vector<double> > > agentDeviceTradeMemory;

    /**
     * Used in devMarketplace... for something... Becky!!
     */
    vector<int> deviceBoughtThisRound;
    vector<Agent *> tradedDeviceWithThisRound;	// TODO: should be Agent &
    /**
     * Keeps track of the number of units of all resources this agent
     has sold.
    */
    int unitsSoldToday;
    int unitsSoldForDevicesToday;
    /**
     * Keeps track of the number of units of all resources this agent
     * has produced.
     * unitsGatheredWithDeviceToday is indexed by TOOL through INDUSTRY.
     * We'll still make 6 vectors, but will only fill in the 2 vectors inside of
     * those for the first 4.
     */
    vector<vector<int> > unitsGatheredWithDeviceToday;
    /**
     * unitsExtractedWithDeviceToday is indexed by TOOL through INDUSTRY.
     * We'll still make 6 vectors, but will only fill in the 2 vectors inside of
     * those for the first 4.
     * sizes of the vectors are: [glob.NUM_DEVICE_TYPES][glob.NUM_RESOURCES]
     */
    vector< vector<int> > unitsExtractedWithDeviceToday;
    /**
     * Each element in these lists is the number of devices made of the
     * corresponding resource.
     * devicesMadeWithDevDevicesToday is indexed by DEVMACHINE and
     * DEVFACTORY only.  We'll still make 6 vectors, but will only fill in
     * the 2 vectors inside of those for DEVMACHINE and DEVFACTORY.
     * sizes are: [glob.NUM_DEVICE_TYPES][glob.NUM_RESOURCES]
     */
    vector< vector<int> > devicesMadeWithDevDevicesToday;
    /**
     * Each element in this list is the number of minutes used of the
     * device of the corresponding resource. 
     * size is [glob.NUM_DEVICE_TYPES]
     */
    vector<double> timeSpentMakingDevicesToday;

    /**
     * Each element in this list is the number of minutes used of the
     * device of the corresponding resource. 
     * size is [glob.NUM_DEVICE_TYPES]
     * timeSpentGatheringWithDeviceToday is indexed by TOOL through INDUSTRY.
     * We'll still make 6 vectors, but will only fill in the 2 vectors inside of
     * those for the first 4.
     */
    vector<double> timeSpentGatheringWithDeviceToday; 
    double timeSpentGatheringWithoutDeviceToday;
    /**
     * The sum of the utilities of all units of all resources held by
     * this agent in a given day.
     * TODO: IS THIS CORRECT?  This comment was for the var above in the code...
     * but I moved it here.  vtn2
     * AND, is it really a double?
     */
    double utilityToday;
    double utilGainThroughDevSoldToday;

    Agent(int number, vector< vector<double> > agentValues);

    // NOTE: startUtilCalc() is here in python, but really should be in utils or properties.

    double utilCalc(int resIndex) const;
    double tempUtilCalc(int resIndex, int change) const;
    int resHeld(int resIndex) const; 
    double utilPerEffort(int resIndex) const;
    int getHeld (int resId) const;
    int getUnitsGatheredToday(int resId) const;
    int getUnitsGatheredWithDevice(int device, int resId) const;
    int getDevicesMadeToday(int deviceIndex, int deviceType) const;
    device_name_t bestDevice(int resIndex) const;
    device_name_t bestDevDevice(device_name_t device, int deviceIndex) const;
    void workDay();
    // vtn2: note: A better name would probably be extractWithDevice.
    void deviceUse(device_name_t device, int deviceIndex, double timeChange);
    bool resBundleHeldCheck(vector<int> bundle) const;
    void toolInvention();
    void deviceInvention(device_name_t device, device_name_t componentType);
    void makeDevice(int deviceIndex, device_name_t device);
    void work(int resIndex, device_name_t bestDevice);
    void workStatsUpdate(int resIndex, device_name_t bestDevice, double workTime);
    void deviceStatsUpdate(int deviceIndex, device_name_t device,
                           device_name_t bestDevDevice, double timeUse);
    device_name_t bestDevDeviceType(device_name_t deviceType, int deviceId);
    void workDayEnd();
    void endDayChecks();
    void decay();
    void updateDeviceComponentExperience();
    double effortCalc(int resIndex) const;
    double tempEffortCalc(int resIndex, int change) const;
    double deviceEffortCalc(int deviceIndex, device_name_t device) const;
    double tempDeviceEffortCalc(int deviceIndex, device_name_t device,
                                       double change) const;
    double deviceHeldForRes(int resIndex) const;
    double devDeviceHeldForRes(device_name_t type, int resIndex) const;
    double sellerDeviceValue(int resIndex, device_name_t device);
    double buyerDeviceValue(int resIndex, device_name_t device);
    vector<int> preferredDeviceTraders(device_name_t device);
    void buys(int resIndex, int amount);
    void sells(int resIndex, int amount);
    void getBackRes(int toolIndex, device_name_t bestDevDevice);
    void getBackDeviceComponents(device_name_t device, int deviceIndex);
    void setAsideRes(int toolIndex, device_name_t bestDevDevice);
    void setAsideDeviceComponents(device_name_t device, int deviceIndex);
    pair<bool, double> canBuy(Device &device);	// seems like this is the only thing that takes a Device object as a parameter...  should we fix this?
    void buysDevice(int deviceIndex, device_name_t device);
    void sellsDevice(int deviceIndex, device_name_t device);
    double utilityHeld(int resIndex);
    double costOfResourceBundle(vector<int> &resourceBundle) const;
    double gainOfResourceBundle(vector<int> &resourceBundle) const;
    double barterUtility(int resIndex, int change) const;
    double deviceCurrentlyHeldForResource(int resIndex, device_name_t device) const;
    void personalDevices(device_name_t device);
    void deviceProduction();
    void calcUtilityToday();
    void newDeviceTrade (device_name_t device);
    void resetDeviceGainAndCostMemory();
    void resetTodayStats();
    void remove();
    int calcMinHeld();
    int calcMaxHeld();
    MaxInfo calcMaxDeviceGainAndIndex(device_name_t deviceType);
};



inline int Agent::resHeld(int resIndex) const
{
    return resProp[resIndex].getHeld();
}

/* Returns the utility per minute of producing a given resource */
inline double Agent::utilPerEffort(int resIndex) const
{
    return utilCalc(resIndex) / effortCalc(resIndex);
}

/*
 * Return the minutes held of the device-making device of the given
 * type for the given resource.
 */
inline double Agent::devDeviceHeldForRes(device_name_t type, int resIndex) const
{
    return devProp[type][resIndex].deviceHeld;
}

/*
 * When an agent gets a resource from a trade it is considered
 * "bought", the unit is added to its "held".
 */
inline void Agent::buys(int resIndex, int amount)
{
    resProp[resIndex].setHeld(resProp[resIndex].getHeld() + amount);
}

/* When an agent gives up a unit from trade, it is considered "sold". */
inline void Agent::sells(int resIndex, int amount)
{
    resProp[resIndex].setHeld(resProp[resIndex].getHeld() - amount);
}

/*
 * Calculates the sums of the marginal utilities of the units of a
 * given resource (essentially the integral of the MU function from 0
 * to the number of units held).
 */
inline double Agent::utilityHeld(int resIndex)
{
    if (resHeld(resIndex) == 0) {
        return 0.0;
    }
    return barterUtility(resIndex, - resHeld(resIndex));
}

/*
 * Returns the marginal value of the next unit of a given resource
 * based off of the previously calculated list of utilities.
 */
inline double Agent::utilCalc(int resIndex) const
{
    int i = resHeld(resIndex);
    if ((unsigned int) i < resProp[resIndex].marginalUtilities.size()) {
        return resProp[resIndex].marginalUtilities[i];
    }
    return glob.MIN_RES_UTIL;
}

/*
 * When considering buying or selling, each agent has to consider
 * what the marginal utility of a resource would be given that they
 * add or subtract a certain number of units of that resource.
 */
inline double Agent::tempUtilCalc(int resIndex, int change) const
{
    // # Returns the marginal value of a resource given a specified change in
    // # inventory without actually changing the inventory
    int i = resHeld(resIndex) + change;
    if ((unsigned int) i < resProp[resIndex].marginalUtilities.size()) {
        return resProp[resIndex].marginalUtilities[i];
    }
    return glob.MIN_RES_UTIL;
}


/*
 * Calculates required effort by consulting the universal efforts
 * list.
 */
inline double Agent::effortCalc(int resIndex) const
{
    int temp = (int) resProp[resIndex].experience;
    /*
     * PROBLEM: to be the same with python, should be:
     * Gives an error if effortCalc() uses glob and tempEffortCalc() doesn't use glob.
     * Doesn't give an error if they both use resProp instead of glob.
     */
     if (temp < (int) resProp[resIndex].resEfforts.size()) {
        return resProp[resIndex].resEfforts[temp];
     }
     return resProp[resIndex].minResEffort;

//    if (temp < glob.MAX_RES_EXPERIENCE) {
//        return glob.RES_EFFORTS[temp];
//    }
//    return glob.MIN_RES_EFFORT;
}


/*
 * When considering making, buying, or selling a device, each agent
 * has to consider what the effort of a resource would be given that
 * they add a certain amount of experience at that resource
 * Returns the effort of getting a resource given a specified
 * change in experience without actually changing the experience.
 */
inline double Agent::tempEffortCalc(int resIndex, int change) const
{
    int temp = (int) resProp[resIndex].experience + change;
	/*
	 * PROBLEM: different with python,but this one doesn't give error so use it.
	 */
    if (temp < (int) resProp[resIndex].resEfforts.size()) {
    	return resProp[resIndex].resEfforts[temp];
    }
    return resProp[resIndex].minResEffort;

//    if (temp < glob.MAX_RES_EXPERIENCE) {
//        return glob.RES_EFFORTS[temp];
//    }
//    return glob.MIN_RES_EFFORT;
}


/*
 * Returns the number of minutes required to make a tool based off
 * of the agent's experience.
 */
inline double Agent::deviceEffortCalc(int deviceIndex, device_name_t device) const 
{
    int temp = (int) devProp[device][deviceIndex].deviceExperience;
//    if (temp < glob.DEVICE_EFFORTS.size()) {
//        return glob.DEVICE_EFFORTS[temp];
//    }
//    return glob.MIN_DEVICE_EFFORT;
    if (temp < (int) devProp[device][deviceIndex].deviceEfforts.size()) {
    	return devProp[device][deviceIndex].deviceEfforts[temp];
    }
    return devProp[device][deviceIndex].minDeviceEffort;
}


/*
 * Returns the effort of making a device given a specified change
 * in experience without actually changing the experience.
 */
inline double Agent::tempDeviceEffortCalc(int deviceIndex, device_name_t device,
                                          double change) const
{
    int temp = (int) devProp[device][deviceIndex].deviceExperience + change;
//    if (temp < (int) glob.DEVICE_EFFORTS.size()) {
//        return glob.DEVICE_EFFORTS[temp];
//    }
//    return glob.MIN_DEVICE_EFFORT;
    if (temp < (int) devProp[device][deviceIndex].deviceEfforts.size()){
    	return devProp[device][deviceIndex].deviceEfforts[temp];
    }
    return devProp[device][deviceIndex].minDeviceEffort;
}

/*
 * If the device is a device-making device, return the minutes held of
 * that type of device for the given resId; if the device is a resource-
 * extracting device, return the minutes held of all resource-extracting
 * devices for the given resId.
 */
inline double Agent::deviceCurrentlyHeldForResource(int resIndex, device_name_t device) const
{
    if (device == DEVMACHINE || device == DEVFACTORY) {
        return devDeviceHeldForRes(device, resIndex);
    }
    return deviceHeldForRes(resIndex);
}

#endif

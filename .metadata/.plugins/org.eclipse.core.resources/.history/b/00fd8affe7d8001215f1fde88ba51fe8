/*
 * main.cpp
 *
 *  Created on: Jun 11, 2013
 *      Author: jj29
 */

/*
 * test.cpp
 *
 *  Created on: Jun 18, 2013
 *      Author: jj29
 */

#include <iostream>
#include <cstdlib>
#include <string>
#include <cstring>
//#include <boost/program_options.hpp>
#include <boost/lexical_cast.hpp>
#include <cctype>

//namespace po = boost::program_options;
using namespace std;

void calculate(int compression1, int compression2)
{
	cout << compression1 * compression2 << endl;

//		if ( isdigit(atoi(t.c_str())) ) {
//			int value = atoi(t.c_str());
//			cout << value << endl;
//		} else {
//			cout << "not numeric" << endl;
//		}

}

int main(int ac, char* av[])
{
//	int comp1 = 0;
//	int comp2 = 0;
//	vector<int> sentence;
//	po::options_description desc("Allowed options");
//	desc.add_options()
//	    ("help", "produce help message")
//	    ("compression", po::value< vector<int> >(&sentence)->multitoken(), "set compression level")
//	;
//
//	po::variables_map vm;
//	po::store(po::parse_command_line(ac, av, desc), vm);
//	po::notify(vm);
//
//	if (vm.count("help")) {
//	    cout << desc << "\n";
//	    return 1;
//	}
//
//	if (vm.count("compression")) {
//	    cout << "Compression level was set to "
//	 << sentence[1] << ".\n";
//	    comp1 = sentence[0];
//	    comp2 = sentence[1];
//	}
//
//	calculate(comp1, comp2);
	cout << "test-----" << endl;
	string t = "30a";
	const char* tchar = t.c_str();
	for (int i = 0; i < strlen(tchar); i++) {
		if ( !isdigit(tchar[i]) ) {
			cout << "fail" << endl;
			break;
		}
	}
	cout << boost::lexical_cast<int>(t) << endl;

}



